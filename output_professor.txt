Token: separator		Lexeme: #
	<Rat23F> ::=  # <Opt Declaration List> <Statement List> #
Token: keyword			Lexeme: integer
	<Opt Declaration List> ::= <Declaration List> | <Empty>
	<Declaration List> ::= <Declaration> ; <Declaration List Prime>
	<Declaration> ::= <Qualifier> <IDs>
	<Qualifier> ::= integer | boolean
Token: identifier		Lexeme: i
	<IDs> ::= <Identifier> <IDs Prime>
Token: separator		Lexeme: ,
	<IDs Prime> ::= , <IDs> | <Empty>
Token: identifier		Lexeme: max
	<IDs> ::= <Identifier> <IDs Prime>
Token: separator		Lexeme: ,
	<IDs Prime> ::= , <IDs> | <Empty>
Token: identifier		Lexeme: sum
	<IDs> ::= <Identifier> <IDs Prime>
Token: separator		Lexeme: ;
	<IDs Prime> ::= , <IDs> | <Empty>
	<Empty> ::= <Empty>
Token: identifier		Lexeme: x
	<Declaration List Prime> ::= <Declaration List> | <Empty>
	<Empty> ::= <Empty>
	<Empty> ::= <Empty>
	<Statement List> ::= <Statement> <Statement List Prime>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Assign> ::= <Identifier> = <Expression> ;
Token: operator			Lexeme: =
Token: identifier		Lexeme: a
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: operator			Lexeme: +
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
Token: identifier		Lexeme: b
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: operator			Lexeme: *
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
Token: identifier		Lexeme: c
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: separator		Lexeme: ;
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= <Empty>
Token: identifier		Lexeme: sum
	<Statement List Prime> ::= <Statement List> | <Empty>
	<Statement List> ::= <Statement> <Statement List Prime>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Assign> ::= <Identifier> = <Expression> ;
Token: operator			Lexeme: =
Token: integer			Lexeme: 0
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: separator		Lexeme: ;
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= <Empty>
Token: identifier		Lexeme: i
	<Statement List Prime> ::= <Statement List> | <Empty>
	<Statement List> ::= <Statement> <Statement List Prime>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Assign> ::= <Identifier> = <Expression> ;
Token: operator			Lexeme: =
Token: integer			Lexeme: 1
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: separator		Lexeme: ;
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= <Empty>
Token: keyword			Lexeme: get
	<Statement List Prime> ::= <Statement List> | <Empty>
	<Statement List> ::= <Statement> <Statement List Prime>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Scan> ::= get ( <IDs> );
Token: separator		Lexeme: (
Token: identifier		Lexeme: max
	<IDs> ::= <Identifier> <IDs Prime>
Token: separator		Lexeme: )
	<IDs Prime> ::= , <IDs> | <Empty>
	<Empty> ::= <Empty>
Token: separator		Lexeme: ;
Token: keyword			Lexeme: while
	<Statement List Prime> ::= <Statement List> | <Empty>
	<Statement List> ::= <Statement> <Statement List Prime>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<While> ::= while ( <Condition> ) <Statement>
Token: separator		Lexeme: (
Token: identifier		Lexeme: i
	<Condition> ::= <Expression> <Relop> <Expression>
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: operator			Lexeme: <
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= <Empty>
	<Relop> ::= == | != | > | < | <= | =>
Token: identifier		Lexeme: max
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: separator		Lexeme: )
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= <Empty>
Token: separator		Lexeme: {
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Compound> ::= { <Statement List> }
Token: identifier		Lexeme: sum
	<Statement List> ::= <Statement> <Statement List Prime>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Assign> ::= <Identifier> = <Expression> ;
Token: operator			Lexeme: =
Token: identifier		Lexeme: sum
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: operator			Lexeme: +
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
Token: identifier		Lexeme: i
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: separator		Lexeme: ;
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= <Empty>
Token: identifier		Lexeme: i
	<Statement List Prime> ::= <Statement List> | <Empty>
	<Statement List> ::= <Statement> <Statement List Prime>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Assign> ::= <Identifier> = <Expression> ;
Token: operator			Lexeme: =
Token: identifier		Lexeme: i
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: operator			Lexeme: +
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
Token: integer			Lexeme: 1
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: separator		Lexeme: ;
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= <Empty>
Token: separator		Lexeme: }
	<Statement List Prime> ::= <Statement List> | <Empty>
	<Empty> ::= <Empty>
Token: keyword			Lexeme: put
	<Statement List Prime> ::= <Statement List> | <Empty>
	<Statement List> ::= <Statement> <Statement List Prime>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Print> ::= put ( <Expression> );
Token: separator		Lexeme: (
Token: identifier		Lexeme: sum
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: operator			Lexeme: +
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
Token: identifier		Lexeme: max
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | true | false
Token: separator		Lexeme: )
	<Primary Prime> ::= <Empty> | ( <IDs> )
	<Empty> ::= <Empty>
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= <Empty>
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= <Empty>
Token: separator		Lexeme: ;
Token: separator		Lexeme: #

Reached end of file without parsing errors.

Symbol Table:
Identifier		Memory Location		Type
i			7003			integer
Identifier		Memory Location		Type
max			7004			integer
Identifier		Memory Location		Type
sum			7005			integer


Assembly Code Listing:
6			MUL			
7			ADD			
8			ADD			
9			ADD			
10			ADD			

